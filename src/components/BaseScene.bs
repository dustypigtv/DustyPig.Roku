Sub Init()

    print "BaseScene:Init"

    m.top.backgroundURI = ""
    m.top.backgroundColor ="0x000000FF"

    m.loggedIn = false

    ' Landing view
    m.landingView = m.top.findNode("landingView")

    ' Login Account View
    m.loginAccountView = m.top.findNode("loginAccountView")
    m.loginAccountView.observeField("switchToSignUpView", "SwitchToSignUpView")
    m.loginAccountView.observeField("switchToLoginProfileView", "SwitchToLoginProfileView")
    m.loginAccountView.observeField("switchToMainView", "SwitchToMainView")


    ' SignUp View
    m.signUpView = m.top.findNode("signupView")
    m.signUpView.observeField("switchToLoginAccountView", "SwitchToLoginAccountView")
    m.signUpView.observeField("switchToLoginProfileView", "SwitchToLoginProfileView")
    m.signUpView.observeField("switchToMainView", "SwitchToMainView")


    ' Login Profile View
    m.loginProfileView = m.top.findNode("loginProfileView")
    m.loginProfileView.observeField("cancel", "CancelLoginProfileView")
    m.loginProfileView.observeField("switchToMainView", "SwitchToMainView")
    m.loginProfileView.observeField("switchToLoginAccountView", "SwitchToLoginAccountView")


    ' Main View
    m.mainView = m.top.findNode("mainView")
    ' *** Sub views of Main View ***

        m.homeScreenView = m.mainView.findNode("homeScreenView")
        m.homeScreenView.observeField("switchToLoginAccountView", "SwitchToLoginAccountView")
        m.homeScreenView.observeField("switchToMovieDetailsView", "SwitchToMovieDetailsView")
        
    ' ******************************


    ' Movie Details View
    m.movieDetailsView = m.top.findNode("movieDetailsView")
    m.movieDetailsView.observeField("hideView", "HideTopView")
    m.movieDetailsView.observeField("removeFromContinueWatching", "RemoveFromContinueWatching")
    m.movieDetailsView.observeField("addToWatchlist", "AddToWatchlist")
    m.movieDetailsView.observeField("removeFromWatchlist", "RemoveFromWatchlist")
    m.movieDetailsView.observeField("switchToAddToPlaylist", "SwitchToAddToPlaylist")
    m.movieDetailsView.observeField("playVideo", "PlayVideo")

    
    ' Video View
    m.videoView = m.top.findNode("videoView")
    m.videoView.observeField("errorStr", "OnVideoError")




    ' *** THEME ***
    m.themeChangeNotifier = m.top.findNode("themeChangeNotifier")

    ' Make sure theme is set on all controls before showing any views
    ThemeTimerFired()

    ' Setup a timer to update the theme
    m.themeTimer = CreateObject("roSGNode", "Timer")
    m.themeTimer.repeat = true
    m.themeTimer.duration = 0.250
    m.themeTimer.ObserveField("fire","ThemeTimerFired")
    m.themeTimer.control = "start"
  




    ' Do this 3rd from last
    m.viewStack = []
    ShowView(m.landingView)
    

    ' Do this 2nd to last
    m.launchTask = CreateObject("roSGNode", "LaunchTask")
    m.launchTask.observeField("startAuthFlow", "SwitchToLoginAccountView")
    m.launchTask.observeField("startProfileFlow", "SwitchToLoginProfileView")
    m.launchTask.observeField("switchToMainView", "SwitchToMainView")
    m.launchTask.Control = "RUN"

    ' Do this LAST
    m.top.signalBeacon("AppLaunchComplete")

End Sub


Sub ShowView(node)

    print "BaseScene:ShowView"

    prev = m.viewStack.peek()
    if prev <> invalid then prev.visible = false    
    node.visible = true
    node.setFocus(true)
    m.viewStack.push(node)    

End Sub

Sub HideTopView()

    print "BaseScene:HideTopView"

   HideView(invalid)

end Sub

Sub HideView(node as Object)

    print "BaseScene:HideView"

    if node = invalid OR (m.viewStack.peek() <> invalid AND m.viewStack.peek().isSameNode(node))     
        last = m.viewStack.pop()
        last.visible = false        
        prev = m.viewStack.peek()
        if prev <> invalid then
            prev.visible = true
            prev.setFocus(true)    
        end if    
    end if

End Sub


Sub ThemeTimerFired()

    ' print "BaseScene:ThemeTimerFired"

    if m.themeChangeNotifier.title = m.global.theme.id  then return
    m.themeChangeNotifier.title = m.global.theme.id

End sub




Sub SwitchToLoginAccountView(event as object)

    print "BaseScene:SwitchToLoginAccountView"

    if event.getData() then
        m.loggedIn = false
        ShowView(m.loginAccountView)
    end if

End Sub

Sub SwitchToSignUpView(event as object)

    print "BaseScene:SwitchToSignUpView"

    if event.getData() then
        m.loggedIn = false
        ShowView(m.signUpView)
    end if

End Sub


Sub SwitchToLoginProfileView(event as object)

    print "BaseScene:SwitchToLoginProfileView"

    if event.getData() then ShowView(m.loginProfileView)

End Sub


Sub SwitchToMainView(event as object)

    print "BaseScene:SwitchToMainView"

    if event.getData() then
        m.loggedIn = true
        m.viewStack = []
        ShowView(m.mainView)
    end if 

End Sub



sub CancelLoginProfileView(event as object)

    print "BaseScene:CancelLoginProfileView"

    if not event.getData() then return

    if m.loggedIn then
        ShowView(m.mainView)
    else
        ShowView(m.loginAccountView)
    end if

end sub


Sub SwitchToMovieDetailsView(event as object)

    print "BaseScene:SwitchToMovieDetailsView"

    node = event.getData()
    if node = invalid then return

    m.movieDetailsView.content = node
    ShowView(m.movieDetailsView)

End Sub


Sub RemoveFromContinueWatching(event as object)

    print "BaseScene:RemoveFromContinueWatching"

    m.homeScreenView.removeFromContinueWatching = event.getData()

End Sub


Sub AddToWatchlist(event as object)

    print "BaseScene:AddToWatchlist"

    m.homeScreenView.addToWatchlist = event.getData()

End Sub

Sub RemoveFromWatchlist(event as object)

    print "BaseScene:RemoveFromWatchlist"

    m.homeScreenView.removeFromWatchlist = event.getData()

End Sub


Sub SwitchToAddToPlaylist(event as object)

    print "BaseScene:SwitchToAddToPlaylist"

    print "*** ADD TO PLAYLIST ***"

End Sub

Sub PlayVideo(event as object)

    print "BaseScene:PlayVideo"

    data = event.getData()
    content = createObject("roSGNode", "ContentNode")
    content.id = data.id
    content.url = data.videoUrl
    content.streamFormat = "mp4"
    m.videoView.content = content
    m.videoView.control = "play"

    ShowView(m.videoView)
    
End Sub

Sub OnVideoError(event as object)

    print "BaseScene:OnVideoError"

    m.videoView.control = "stop"
        print event.getData()

End Sub











Function onKeyEvent(key as String, press as Boolean) as Boolean

    print "BaseScene:OnKeyEvent", key, press
    
    if not press then return false

    if key = "back" then

        if m.videoView.visible then 

            m.videoView.control = "stop"

        end if

        if not m.mainView.visible then HideTopView()
        return true

    end if

    return false

End Function