Sub Init()

    print "BaseScene:Init"

    m.top.backgroundURI = ""
    m.top.backgroundColor ="0x000000FF"

    m.allViews = { }

    ' Landing view
    m.landingView = m.top.findNode("landingView")
    m.allViews.landingView = m.landingView


    ' Login Account View
    m.loginAccountView = m.top.findNode("loginAccountView")
    m.allViews.loginAccountView = m.loginAccountView


    ' SignUp View
    m.signUpView = m.top.findNode("signupView")
    m.allViews.signUpView = m.signUpView


    ' Login Profile View
    m.loginProfileView = m.top.findNode("loginProfileView")
    m.allViews.loginProfileView = m.loginProfileView


    ' Main View
    m.mainView = m.top.findNode("mainView")
    m.allViews.mainView = m.mainView
    

    ' Movie Details View
    m.movieDetailsView = m.top.findNode("movieDetailsView")
    m.allViews.movieDetailsView = m.movieDetailsView

    
    ' Video View
    m.videoView = m.top.findNode("videoView")
    m.allViews.videoView = m.videoView
    m.videoView.observeField("playbackFinished", "OnVideoView_PlaybackFinished")

    
    ' Observe Globals
    m.global.observeField("loggedOut", "OnGlobal_LoggedOut")
    m.global.observeField("showViewWithId", "OnGlobal_ShowViewWithId")
    m.global.observeField("startVideoPlayback", "OnGlobal_StartVideoPlayback")


    ' Do this 3rd from last
    m.viewStack = []
    ShowView(m.landingView)
    

    ' Do this 2nd to last
    m.launchTask = CreateObject("roSGNode", "LaunchTask")
    m.launchTask.observeField("startAuthFlow", "OnShowView_LoginAccount")
    m.launchTask.observeField("startProfileFlow", "OnShowView_LoginProfile")
    m.launchTask.observeField("showView_Main", "OnShowView_Main")
    m.launchTask.Control = "RUN"



    ' Do this LAST
    m.top.signalBeacon("AppLaunchComplete")

End Sub


Sub ShowView(node)

    print "BaseScene:ShowView"

    prev = m.viewStack.peek()
    if prev <> invalid then prev.visible = false

    ' If a screen needs to reset before being shown, it can implement and monitor this interface
    ' This is set when a new view is pushed to the stack, before it's shown
    try
        node.beforeShowAfterPush = true
    catch e
    end try
    node.visible = true
    
    
    node.setFocus(true)
    m.viewStack.push(node)    

End Sub

Sub HideTopView()

    print "BaseScene:HideTopView"

    HideView(invalid)

end Sub

Sub HideView(node as Object)

    print "BaseScene:HideView"

    if node = invalid OR (m.viewStack.peek() <> invalid AND m.viewStack.peek().isSameNode(node))     
        last = m.viewStack.pop()
        last.visible = false
        
        prev = m.viewStack.peek()
        if prev <> invalid then

            ' If a screen needs to reset before being shown, it can implement and monitor this interface
            ' This is set when a prvious view is popped from the stack, before the previous view is shown
            try
                node.beforeShowAfterPop = true
            catch e
            end try
            
            prev.visible = true
            prev.setFocus(true)    
        end if    
    end if

End Sub

Sub HideAllViews()

    for each item in m.viewStack
        item.visible = false
    end for
    m.viewStack = []

End Sub



Sub OnGlobal_LoggedOut(event as object)

    if event.getData() then
        m.global.showViewWithId = "loginAccountView"
    else
        m.global.showViewWithId = "mainView"
    end if

End Sub


Sub OnGlobal_ShowViewWithId(event as object)

    id = event.getData()

    print "BaseScene:OnGlobal_ShowViewWithid", id

    if id = "loginAccountView" then
   
        HideAllViews()
        ShowView(m.loginAccountView)
   
    else if id = "signUpView" then
   
        HideAllViews()
        ShowView(m.signUpView)
   
    else if id = "mainView" then
   
        HideAllViews()
        ShowView(m.mainView)
   
    else
   
        ShowView(m.allViews[id])
   
    end if

End Sub








Sub OnGlobal_StartVideoPlayback(event as object)

    print "BaseScene:OnPlayVideo"

    if not event.getData() then return
    
    m.videoView.content = m.global.currentDetailedMedia
    m.videoView.control = "play"

    ShowView(m.videoView)
    
End Sub





Sub OnVideoView_PlaybackFinished(event as object)

    if event.getData() and m.videoView.visible then HideTopView()

End Sub





Function onKeyEvent(key as String, press as Boolean) as Boolean

    print "BaseScene:OnKeyEvent", key, press
    
    if not press then return false

    if key = "back" then

        if m.videoView.visible then 

            m.videoView.control = "stop"

        end if

        if not m.mainView.visible then HideTopView()
        return true

    end if

    return false

End Function