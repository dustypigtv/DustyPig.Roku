sub Init()

    print "HomeScreenView:Init"

    m.firstLoad = true

    ' Find controls    
    m.busySpinner = m.top.findNode("busySpinner")
    m.busyLabel = m.top.findNode("busyLabel")
    m.rowList = m.top.findNode("rowList")
    m.backdropPoster = m.top.findNode("backdropPoster")
    m.titleLabel = m.top.findNode("titleLabel")
    m.descriptionLabel = m.top.findNode("descriptionLabel")

    
    ' Observers
    m.rowList.observeField("rowItemFocused", "OnRowList_ItemFocused")
    m.rowList.observeField("rowItemSelected", "OnRowList_ItemSelected")
    
    
    ' Error dialog
    m.errorDialog = createObject("roSGNode", "StandardMessageDialog")
    m.errorDialog.buttons = ["OK"]
    m.errorDialog.title = "Error"
    ' m.errorDialog.observeField("buttonSelected", "OnErrorDialogClosed")
    ' m.errorDialog.observeField("wasClosed", "OnErrorDialogClosed")


    
    ' Home screen task
    m.homeScreenTask = CreateObject("roSGNode", "HomeScreenTask")
    m.homeScreenTask.observeField("success", "OnHomeScreenTask_DataAvailable")



    ' Update timer
    m.updateTimer = CreateObject("roSGNode", "Timer")
    m.updateTimer.repeat = true
    m.updateTimer.duration = 300
    m.updateTimer.ObserveField("fire", "OnUpdateDataTimer_Fired")



    ' Observe this
    m.top.observeField("visible", "OnThis_VisibleChanged")
    m.top.observeField("focusedChild", "OnThis_FocusChanged")
    
    
    ' Observer global fields
    m.global.observeField("addToContinueWatching", "OnGlobal_AddToContinueWatching")
    m.global.observeField("removeFromContinueWatching", "OnGlobal_RemoveFromContinueWatching")
    m.global.observeField("addToWatchlist", "OnGlobal_AddToWatchlist")
    m.global.observeField("removeFromWatchlist", "OnGlobal_RemoveFromWatchlist")

end sub




Sub OnThis_VisibleChanged(event as object)
    
    print "HomeScreenView:OnThis_VisibleChanged"

    if event.getData() 
        if m.firstLoad then
            m.firstLoad = false
            UpdateData()
        end if
    end if

End Sub



Sub OnThis_FocusChanged()

    print "HomeScreenView:OnThis_FocusChanged"

    if m.top.isInFocusChain() then m.rowList.setFocus(true)

End Sub



Sub OnUpdateDataTimer_Fired()

    print "HomeScreenView:OnUpdateDataTimer_Fired"

    UpdateData()

End sub


Sub UpdateData()

    print "HomeScreenView:UpdateData"

    m.homeScreenTask.control = "stop"
    m.homeScreenTask.control = "run"

End Sub




Sub OnHomeScreenTask_DataAvailable()

    print "HomeScreenView:OnHomeScreenTask_DataAvailable"

    m.busySpinner.visible = false
    m.busyLabel.visible = false
    
    if m.homeScreenTask.success then
    
        m.rowList.numRows = m.homeScreenTask.data.getChildCount()
        if m.rowList.content = invalid then m.rowList.content = m.homeScreenTask.data
        OnRowList_ItemFocused()

    else
        if m.top.visible then 
            m.errorDialog.message = [m.homeScreenTask.error]
            m.top.getScene().dialog = m.errorDialog
        end if
    end if

    if m.updateTimer.control <> "start" then m.updateTimer.control = "start"

End Sub





' Fires when an item in the rowList gets focus
Sub OnRowList_ItemFocused()

    print "HomeScreenView:OnRowList_ItemFocused"

    try
    
        if not m.top.visible then return

        idx = m.rowList.rowItemFocused
        if idx.count() < 2 then return
        rowContent = m.rowList.content.getChild(idx[0])
        focusedItem = rowContent.getChild(idx[1])
        SetCurrentMedia(focusedItem)

        ' Check values before changing to prevent flickering
        backdropUrl = focusedItem.backdropUrl
        if not StringHasValue(backdropUrl) then backdropUrl = ""
        if m.backdropPoster.uri <> backdropUrl then m.backdropPoster.uri = backdropUrl

        if m.titleLabel.text <> focusedItem.title then m.titleLabel.text = focusedItem.title

        ' public enum MediaTypes
        ' {
        '     Movie = 1,
        '     Series = 2,
        '     Episode = 3,
        '     Playlist = 4
        ' }

        description = focusedItem.mediaType = 4 ? "* Playlist *" : focusedItem.description
        if m.descriptionLabel.text <> description then m.descriptionLabel.text = description

    catch e

        print e

    end try

End Sub


' Fires when an item in the rowList is selected (ok button pressed)
Sub OnRowList_ItemSelected()

    print "HomeScreenView:OnRowList_ItemSelected"

    idx = m.rowList.rowItemFocused
    if idx.count() < 2 then return
    rowContent = m.rowList.content.getChild(idx[0])
    selContent = rowContent.getChild(idx[1])
    SetCurrentMedia(selContent)


    ' Movie = 1,
    ' Series = 2,
    ' Playlist = 4
    if m.global.currentMedia.mediaType = 1 then m.global.showViewWithId = "movieDetailsView"

End sub


Sub OnGlobal_AddToContinueWatching()

    print "HomeScreenView:OnGlobal_AddToContinueWatching"

    ' public const long ID_CONTINUE_WATCHING = -500
    section = FindChildNode(m.homeScreenTask.data, "-500")
    if section = invalid then
       
        ' Add Section
        section = createObject("roSGNode", "ContentNode")
        section.setFields({
            id:"-500",
            title:"Watchlist"
        })
        m.homeScreenTask.data.insertChild(section, 0)

    end if

    newList = []
    newList.push(m.global.currentMedia.data)
    for i = 0 to section.getChildCount() - 1
        curItem = section.getChild(i)
        if curItem.id <> m.global.currentMedia.id then newList.push(curItem.data)
    end for

    i = 0
    for each newItem in newList
        if i < section.getChildCount() then
            curItem = section.getChild(i)
            if curItem.id <> newItem.id then curItem.data = newItem
        else
            curItem = section.createChild("BasicMediaNode")
            curItem.data = newItem
        end if
        i++
    end for

End Sub


Sub OnGlobal_RemoveFromContinueWatching()

    print "HomeScreenView:OnGlobal_RemoveFromContinueWatching"

    ' public const long ID_CONTINUE_WATCHING = -500
    section = FindChildNode(m.homeScreenTask.data, "-500")
    if section = invalid then return

    item = FindChildNode(section, m.global.currentMedia.id)
    if item = invalid then return

    section.removeChild(item)

    if section.getChildCount() = 0 then m.homeScreenTask.data.removeChild(section)

End Sub


' This needs a content node with the following fields set:
Sub OnGlobal_AddToWatchlist()

    print "HomeScreenView:OnGlobal_AddToWatchlist"

    ' public const long ID_CONTINUE_WATCHING = -500
    ' public const long ID_WATCHLIST = -400
    section = FindChildNode(m.homeScreenTask.data, "-400")
    if section = invalid then
       
        ' Add Section
        ' Section is second under Continue Watching 
        continueWatching = FindChildNode(m.homeScreenTask.data, "-500")
        if continueWatching = invalid then idx = 0 else idx = 1
        section = createObject("roSGNode", "ContentNode")
        section.setFields({
            id:"-400",
            title:"Watchlist"
        })
        m.homeScreenTask.data.insertChild(section, idx)

    end if

    item = FindChildNode(section, m.global.currentMedia.id)
    if item <> invalid then return

    ' Add Item
    section.appendChild(m.global.currentMedia)
    
End Sub




Sub OnGlobal_RemoveFromWatchlist()

    print "HomeScreenView:OnGlobal_RemoveFromWatchlist"

    ' public const long ID_WATCHLIST = -400
    section = FindChildNode(m.homeScreenTask.data, "-400")
    if section = invalid then return

    item = FindChildNode(section, m.global.currentMedia.id)
    if item = invalid then return

    section.removeChild(item)

    if section.getChildCount() = 0 then m.homeScreenTask.data.removeChild(section)

End Sub