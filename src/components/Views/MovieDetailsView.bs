Sub Init()

    ' Find controls    
    m.busySpinner = m.top.findNode("busySpinner")
    m.backdropPoster = m.top.findNode("backdropPoster")
    m.titleLabel = m.top.findNode("titleLabel")
    m.yearLabel = m.top.findNode("yearLabel")
    m.ratedLabel = m.top.findNode("ratedLabel")
    m.lengthLabel = m.top.findNode("lengthLabel")
    m.remainingLabel = m.top.findNode("remainingLabel")
    m.playButton = m.top.findNode("playButton")
    m.requestButton = m.top.findNode("requestButton")
    m.resumeButton = m.top.findNode("resumeButton")
    m.markWatchedButton = m.top.findNode("markWatchedButton")
    m.descriptionLabel = m.top.findNode("descriptionLabel")


    ' Error dialog
    m.errorDialog = createObject("roSGNode", "StandardMessageDialog")
    m.errorDialog.buttons = ["OK"]
    m.errorDialog.title = "Error"
    m.errorDialog.observeField("buttonSelected", "OnErrorDialogClosed")


    ' Movie Details task
    m.movieDetailsTask = CreateObject("roSGNode", "MovieDetailsTask")
    m.movieDetailsTask.observeField("data", "OnMovieDataAvailable")


    ' Timer - Create AFTER creating the movieDetailsTask
    m.timer = CreateObject("roSGNode", "Timer")
    m.timer.repeat = true
    m.timer.duration = 0.250
    m.timer.ObserveField("fire","TimerFired")
    m.timer.control = "start"
  

    ' Observers
    m.top.observeField("visible", "OnVisibleChanged")
    m.top.observeField("content", "OnContentSet")

end sub



Sub OnVisibleChanged(event as object)
    
    if not event.getData() then return
    
End Sub


Sub OnErrorDialogClosed()

    m.top.getScene().dialog = invalid

End Sub


Sub TimerFired()

    m.busySpinner.visible = m.top.visible and m.movieDetailsTask.state = "run"

End sub



' Fires when the BaseScene sets the Content node
Sub OnContentSet()

    ' Reset
    m.titleLabel.text = invalid
    m.yearLabel.text = invalid
    m.ratedLabel.text = invalid
    m.lengthLabel.text = invalid
    m.remainingLabel.text = invalid
    m.playButton.visible = false
    m.requestButton.visible = false
    m.resumeButton.visible = false
    m.markWatchedButton.visible = false
    m.descriptionLabel.text = invalid

    ' Load
    content = m.top.content
    
    m.movieDetailsTask.control = "stop"
    m.movieDetailsTask.id = content.id
    m.movieDetailsTask.control = "run"

    m.backdropPoster.uri = content.backdropUrl
    

End Sub


Sub OnMovieDataAvailable()

    result = m.movieDetailsTask.data
    if result.success then
        
        data = result.data
        m.titleLabel.text = data.title

        try
            date = CreateObject("roDateTime")
            date.FromISO8601String(data.date)
            m.yearLabel.text = str(date.getYear())
        catch e
            m.yearLabel.text = "1900"
        end try

        ' From API
        ' public enum MovieRatings
        ' {
        '     None = 0,
        '     G = 1,
        '     PG = 2,
        '     PG_13 = 3,
        '     R = 4,
        '     NC_17 = 5,
        '     Unrated = 6
        ' }        
        if data.rated = 1 then 
            m.ratedLabel.text = "Rated G"
        else if data.rated = 2 then 
            m.ratedLabel.text = "Rated PG"
        else if data.rated = 3 then 
            m.ratedLabel.text = "Rated PG-13"
        else if data.rated = 4 then 
            m.ratedLabel.text = "Rated R"
        else if data.rated = 5 then 
            m.ratedLabel.text = "Rated NC-17"
        else if data.rated = 6 then 
            m.ratedLabel.text = "Unrated"
        else  
            m.ratedLabel.text = "Not Rated"
        end if

        if data.length <> invalid and data.length > 0 then m.lengthLabel.text = GetDurationString(data.length)

        if data.canPlay then
           
            m.playButton.text = "Play"

            if data.length <> invalid and data.length > 0 and data.played <> invalid and data.played > 60 then 
                m.remainingLabel.text = GetDurationString(data.length - data.played) + " remaining"
                m.resumeButton.visible = true
                m.resumeButton.setFocus(true)
                m.markWatchedButton.visible = true
            end if

            m.playButton.visible = true

        else

            m.requestButton.visible = true

        end if
        
        if not m.resumeButton.visible then 
            if m.playButton.visible then 
                m.playButton.setFocus(true)
            else if m.requestButton.visible then 
                m.requestButton.setFocus(true)
            end if
        end if


        m.descriptionLabel.text = data.description


    else if result.statusCode = 401 then
    
        m.top.switchToLoginAccountView = true
    else
    
        m.errorDialog.message = [result.error]
        m.top.getScene().dialog = m.errorDialog
    
    end if

End Sub






Function onKeyEvent(key as String, press as Boolean) as Boolean

    if not press then return false

    if key = "back" then 

        m.top.hideView = true
        return true

    end if



    if key = "right" then

        if m.playButton.hasFocus() and m.resumeButton.visible then 
            
            m.resumeButton.setFocus(true)
            return true
        
        end if

        if m.resumeButton.hasFocus() then

            m.markWatchedButton.setFocus(true)
            return true

        end if

    end if




    if key = "left" then

        if m.markWatchedButton.hasFocus() then

            m.resumeButton.setFocus(true)
            return true
        end if

        if m.resumeButton.hasFocus() then 

            m.playButton.setFocus(true)
            return true
        
        end if

    end if
    
    return false

End Function
