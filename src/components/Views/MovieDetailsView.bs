Sub Init()

    print "MovieDetailsView:Init"

    ' Find controls    
    m.busySpinner = m.top.findNode("busySpinner")
    m.backdropPoster = m.top.findNode("backdropPoster")
    m.titleLabel = m.top.findNode("titleLabel")
    m.yearLabel = m.top.findNode("yearLabel")
    m.ratedLabel = m.top.findNode("ratedLabel")
    m.lengthLabel = m.top.findNode("lengthLabel")
    m.remainingLabel = m.top.findNode("remainingLabel")
    m.playButton = m.top.findNode("playButton")
    m.requestButton = m.top.findNode("requestButton")
    m.resumeButton = m.top.findNode("resumeButton")
    m.markWatchedButton = m.top.findNode("markWatchedButton")
    m.watchlistButton = m.top.findNode("watchlistButton")
    m.playlistButton = m.top.findNode("playlistButton")
    m.descriptionLabel = m.top.findNode("descriptionLabel")
    m.castCrewRowList = m.top.findNode("castCrewRowList")
    m.selectedPersonLabel = m.top.findNode("selectedPersonLabel")

    m.playbackButtonLayoutGroup = m.top.findNode("playbackButtonLayoutGroup")
    m.otherActionLayoutGroup = m.top.findNode("otherActionLayoutGroup")

    ' Tracking focus
    m.lastPlaybackButtonFocused = m.playButton
    m.playButton.observeField("focusedChild", "OnPlaybackButtonsFocusedChildChanged")
    m.requestButton.observeField("focusedChild", "OnPlaybackButtonsFocusedChildChanged")
    m.resumeButton.observeField("focusedChild", "OnPlaybackButtonsFocusedChildChanged")
    m.markWatchedButton.observeField("focusedChild", "OnPlaybackButtonsFocusedChildChanged")

    m.lastOtherActionButtonFocused = m.watchlistButton
    m.watchlistButton.observeField("focusedChild", "OnOtherActionsButtonsFocusedChildChanged")
    m.playlistButton.observeField("focusedChild", "OnOtherActionsButtonsFocusedChildChanged")

    m.castCrewRowList.observeField("focusedChild", "HidePersonName")
    m.castCrewRowList.observeField("rowItemFocused", "OnFocusedPersonChanged")


    ' Button clicks
    m.playButton.observeField("buttonSelected", "OnPlayClicked")
    m.requestButton.observeField("buttonSelected", "OnRequestClicked")
    m.resumeButton.observeField("buttonSelected", "OnResumeClicked")
    m.markWatchedButton.observeField("buttonSelected", "OnMarkWatchClicked")
    m.watchlistButton.observeField("buttonSelected", "OnWatchlistClicked")
    m.playlistButton.observeField("buttonSelected", "OnAddToPlaylistClicked")



    ' Error dialog
    m.errorDialog = createObject("roSGNode", "StandardMessageDialog")
    m.errorDialog.buttons = ["OK"]
    m.errorDialog.title = "Error"
    m.errorDialog.observeField("buttonSelected", "OnErrorDialogClosed")


    ' Movie Details task
    m.movieDetailsTask = CreateObject("roSGNode", "MovieDetailsTask")
    m.movieDetailsTask.observeField("data", "OnMovieDataAvailable")


    ' Mark Watched task
    m.markMovieWatchedTask = CreateObject("roSGNode", "MarkMovieWatchedTask")
    m.toggleWatchlistTask = CreateObject("roSGNode", "ToggleWatchlistTask")



    ' Observers
    m.top.observeField("visible", "OnVisibilityChanged")
    m.top.observeField("content", "OnContentSet")

end sub


Sub OnVisibilityChanged(event as object)

    print "MovieDetailsView:OnVisibilityChanged"

    if not event.getData() then m.movieDetailsTask.control = "stop"

End Sub


Sub OnPlaybackButtonsFocusedChildChanged(event as object)

    print "MovieDetailsView:OnPlaybackButtonsFocusedChildChanged"

    m.lastPlaybackButtonFocused = event.getRoSGNode()

End Sub

Sub OnOtherActionsButtonsFocusedChildChanged(event as object)

    print "MovieDetailsView:OnOtherActionsButtonsFocusedChildChanged"

    m.lastOtherActionButtonFocused = event.getRoSGNode()

End Sub


Sub OnErrorDialogClosed()

    print "MovieDetailsView:OnErrorDialogClosed"

    m.top.getScene().dialog = invalid

End Sub





Sub OnFocusedPersonChanged()

    print "MovieDetailsView:OnFocusedPersonChanged"

    idx = m.castCrewRowList.rowItemFocused
    rowContent = m.castCrewRowList.content.getChild(idx[0])
    selItem = rowContent.getChild(idx[1])
    m.selectedPersonLabel.text = selItem.title

End sub


Sub HidePersonName()

    print "MovieDetailsView:HidePersonName"

    if not m.castCrewRowList.hasFocus() then m.selectedPersonLabel.text = invalid 

End Sub


' Fires when the BaseScene sets the Content node
Sub OnContentSet()

    print "MovieDetailsView:OnContentSet"

    m.movieDetailsTask.control = "stop"
    
    
    ' Reset
    m.titleLabel.text = invalid
    m.yearLabel.text = invalid
    m.ratedLabel.text = invalid
    m.lengthLabel.text = invalid
    m.remainingLabel.text = invalid
    m.playButton.visible = false
    m.requestButton.visible = false
    m.resumeButton.visible = false
    m.markWatchedButton.visible = false
    m.watchlistButton.visible = false
    m.playButton.visible = false
    m.descriptionLabel.text = invalid
    m.castCrewRowList.content = invalid
    m.selectedPersonLabel.text = invalid
    m.busySpinner.visible = true

    m.lastOtherActionButtonFocused = m.watchlistButton


    ' Load
    content = m.top.content
    
    m.movieDetailsTask.id = content.id
    m.movieDetailsTask.control = "run"

    m.backdropPoster.uri = content.backdropUrl ?? ""
    
End Sub


Sub OnMovieDataAvailable()

    print "MovieDetailsView:OnMovieDataAvailable"

    if not m.top.visible then return

    m.busySpinner.visible = false

    result = m.movieDetailsTask.data
    if result.success then
        
        m.data = result.data
        m.titleLabel.text = m.data.title

        try
            date = CreateObject("roDateTime")
            date.FromISO8601String(m.data.date)
            m.yearLabel.text = str(date.getYear())
        catch e
            m.yearLabel.text = "1900"
        end try

        ' From API
        ' public enum MovieRatings
        ' {
        '     None = 0,
        '     G = 1,
        '     PG = 2,
        '     PG_13 = 3,
        '     R = 4,
        '     NC_17 = 5,
        '     Unrated = 6
        ' }        
        if m.data.rated = 1 then 
            m.ratedLabel.text = "Rated G"
        else if m.data.rated = 2 then 
            m.ratedLabel.text = "Rated PG"
        else if m.data.rated = 3 then 
            m.ratedLabel.text = "Rated PG-13"
        else if m.data.rated = 4 then 
            m.ratedLabel.text = "Rated R"
        else if m.data.rated = 5 then 
            m.ratedLabel.text = "Rated NC-17"
        else if m.data.rated = 6 then 
            m.ratedLabel.text = "Unrated"
        else  
            m.ratedLabel.text = "Not Rated"
        end if

        if m.data.length <> invalid and m.data.length > 0 then m.lengthLabel.text = GetDurationString(m.data.length)

        if m.data.canPlay then
           
            m.playButton.text = "Play"

            if m.data.length <> invalid and m.data.length > 0 and m.data.played <> invalid and m.data.played > 60 then 
                m.remainingLabel.text = GetDurationString(m.data.length - m.data.played) + " remaining"
                m.resumeButton.visible = true
                m.resumeButton.setFocus(true)
                m.markWatchedButton.visible = true
            end if

            m.playButton.visible = true

            m.watchlistButton.icon = m.data.inWatchList ? "pkg:/images/check.png" : "pkg:/images/add.png"
            m.watchlistButton.visible = true
            
            m.playlistButton.visible = true
        
        else

            m.requestButton.visible = true

        end if
        
        if not m.resumeButton.visible then 
            if m.playButton.visible then 
                m.playButton.setFocus(true)
            else if m.requestButton.visible then 
                m.requestButton.setFocus(true)
            end if
        end if


        m.descriptionLabel.text = m.data.description

        m.castCrewRowList.content = m.movieDetailsTask.castCrew
        

        
    else if result.statusCode = 401 then
    
        m.top.switchToLoginAccountView = true
    else
    
        m.errorDialog.message = [result.error]
        m.top.getScene().dialog = m.errorDialog
    
    end if

End Sub


Sub OnPlayClicked()

    print "MovieDetailsView:OnPlayClicked"

    m.top.playVideo = {
        id:m.data.id,
        title:m.data.title,
        secondaryTitle:m.yearLabel.text,
        videoUrl:m.data.videoUrl
    }

End Sub



Sub OnRequestClicked()

    print "MovieDetailsView:OnRequestClicked"

End Sub



Sub OnResumeClicked()

    print "MovieDetailsView:OnResumeClicked"

End Sub



Sub OnMarkWatchClicked()

    print "MovieDetailsView:OnMarkWatchClicked"

    m.markMovieWatchedTask.id = m.data.id
    m.markMovieWatchedTask.control = "run"
    m.data.played = 0
    m.playButton.setFocus(true)
    m.markWatchedButton.visible = false
    m.resumeButton.visible = false
    m.remainingLabel.text = "invalid"
    m.top.removeFromContinueWatching = m.data.id

End Sub




Sub OnWatchlistClicked()

    print "MovieDetailsView:OnWatchlistClicked"

    m.toggleWatchlistTask.control = "stop"
    
    add = not m.data.inWatchList
    id = m.data.id

    m.toggleWatchlistTask.add = add
    m.toggleWatchlistTask.id = id
    m.toggleWatchlistTask.control = "run"

    m.watchlistButton.icon = add ? "pkg:/images/check.png" : "pkg:/images/add.png"
    if add then 
    
        node = createObject("roSGNode", "ContentNode")
        node.setFields({
            id:m.data.id,
            title:m.data.title,
            description:m.data.description,
            FHDGRIDPOSTERURL:m.data.artworkUrl
        })

        ' Movie = 1
        node.addFields({backdropUrl: m.data.backdropUrl, mediaType: 1})
        m.top.addToWatchlist = node
    
    else 
        m.top.removeFromWatchlist = id
    end if

    
End Sub



Sub OnAddToPlaylistClicked()

    print "MovieDetailsView:OnAddToPlaylistClicked"

    m.top.switchToAddToPlaylist = {
        id:m.data.id,
        mediaType:m.data.mediaType
    }

End Sub



Function onKeyEvent(key as String, press as Boolean) as Boolean

    print "MovieDetailsView:OnKeyEvent", key, press
    
    if not press then return false

    if key = "right" then

        if m.playButton.hasFocus() and m.resumeButton.visible then 
            
            m.resumeButton.setFocus(true)
            return true
        
        end if

        if m.resumeButton.hasFocus() then

            m.markWatchedButton.setFocus(true)
            return true

        end if

        if m.watchlistButton.hasFocus() then

            m.playlistButton.setFocus(true)
            return true

        end if

    end if




    if key = "left" then

        if m.markWatchedButton.hasFocus() then

            m.resumeButton.setFocus(true)
            return true

        end if

        if m.resumeButton.hasFocus() then 

            m.playButton.setFocus(true)
            return true
        
        end if

        if m.playlistButton.hasFocus() then

            m.watchlistButton.setFocus(true)
            return true

        end if

    end if


    if key = "up" then

        if m.otherActionLayoutGroup.isInFocusChain() then

            m.lastPlaybackButtonFocused.setFocus(true)
            return true

        end if

        if m.castCrewRowList.isInFocusChain() then

            m.lastOtherActionButtonFocused.setFocus(true)
            return true

        end if

    end if



    if key = "down" then

        if m.playbackButtonLayoutGroup.isInFocusChain() then

            m.lastOtherActionButtonFocused.setFocus(true)
            return true

        end if

        if m.otherActionLayoutGroup.isInFocusChain() then

            m.castCrewRowList.setFocus(true)
            return true

        end if

    end if


    
    return false

End Function
