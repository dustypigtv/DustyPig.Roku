Sub Init()

    m.mainLayout = m.top.findNode("mainLayout")
    m.busySpinner = m.top.findNode("busySpinner")
    m.backdropPoster = m.top.findNode("backdropPoster")
    m.mediaInfoView = m.top.findNode("mediaInfoView")
    m.episodesOrCastCrewRowList = m.top.findNode("episodesOrCastCrewRowList")
    m.divider = m.top.findNode("divider")
    m.episodesGroup = m.top.findNode("episodesGroup")
    m.seasonList = m.top.findNode("seasonList")
    m.episodesList = m.top.findNode("episodesList")
    m.castAndCrewView = m.top.findNode("castAndCrewView")


    m.slideUpAnimation = m.top.findNode("slideUpAnimation")
    m.slideDownAnimation = m.top.findNode("slideDownAnimation")

    ' Tracking focus
    m.lastFocusedControl = invalid
    m.top.observeField("reset", "OnResetFocus")
    m.episodesOrCastCrewRowList.observeField("focusedChild", "OnFocusChanged")

    m.episodesOrCastCrewRowList.observeField("rowItemFocused", "OnEpisodesOrCastCrewList_ItemFocused")

    m.dontJump = false
    m.seasonList.observeField("itemFocused", "OnSeasonList_ItemFocused")
    m.episodesList.observeField("itemFocused", "OnEpisodesList_ItemFocused")



    ' Error dialog
    m.errorDialog = createObject("roSGNode", "StandardMessageDialog")
    m.errorDialog.buttons = ["OK"]
    m.errorDialog.title = "Error"
    m.errorDialog.observeField("buttonSelected", "OnErrorDialog_Closed")


     ' Series Details task
     m.seriesDetailsTask = CreateObject("roSGNode", "SeriesDetailsTask")
     m.seriesDetailsTask.observeField("state", "SetupView")
 
     ' Observers
     m.top.observeField("visible", "SetupView")

     m.global.observeField("currentBasicMedia", "OnGlobal_CurrentBasicMediaChanged")


End sub




' ********** FOCUS TRACKING **********

Sub OnResetFocus()

    m.lastFocusedControl = invalid
    m.mediaInfoView.resetFocusTracking = true
    m.episodesOrCastCrewRowList.jumpToItem = 0

End Sub


Sub OnFocusChanged(event as Object)

    node = event.getRoSGNode()
    if node <> invalid then m.lastFocusedControl = node

End Sub



Sub OnEpisodesOrCastCrewList_ItemFocused()

    idx = GetEpisodeOrCastCrewListSelectedIndex()

    if idx = 0 then
        m.castAndCrewView.visible = false
        m.episodesGroup.visible = true
    else
        m.episodesGroup.visible = false
        m.castAndCrewView.visible = true
    end if

End Sub


Sub OnSeasonList_ItemFocused()

    if not m.seasonList.hasFocus() then return
    if m.seasonList.content = invalid then return
    if m.episodesList.content = invalid then return
    
    if m.dontJump then 
        m.dontJump = false
        return
    end if
    
    dm = m.global.currentDetailedMedia
    seasonIdx = m.seasonList.itemFocused
    seasonNum = dm.seasons.getChild(seasonIdx).Id
    for episodeIdx = 0 to dm.episodes.getChildCount() - 1
        if dm.episodes.getChild(episodeIdx).seasonNum.toStr() = seasonNum then
            m.episodesList.jumpToItem = episodeIdx
            exit for
        end if
    next
    
End Sub



Sub OnEpisodesList_ItemFocused()

    if not m.episodesList.hasFocus() then return
    if m.episodesList.content = invalid then return
    if m.seasonList.content = invalid then return
    SetSeason(m.episodesList.itemFocused)
        
End Sub










' ********** DATA UPDATE TRIGGER **********

Sub OnGlobal_CurrentBasicMediaChanged()
    
    bm = m.global.currentBasicMedia
    if bm = invalid then return
    if bm.contentType <> 2 then return

    SetBackdrop()

    m.seriesDetailsTask.control = "stop"
    m.seriesDetailsTask.id = bm.id
    m.seriesDetailsTask.control = "run"

End Sub






Sub SetupView()

    if not m.top.visible then return

    SetBackdrop()

    if m.seriesDetailsTask.state = "run" then
        
        m.mediaInfoView.visible = false
        m.episodesOrCastCrewRowList.visible = false
        m.divider.visible = false
        m.episodesGroup.visible = false
        m.castAndCrewView.visible = false

        m.busySpinner.visible = true
        
    else

        if m.seriesDetailsTask.success then
        
            dm = m.seriesDetailsTask.data
            m.global.currentDetailedMedia = dm
                        
            m.mediaInfoView.visible = true
            

            ' Episodes or Cast selector tabs
            BuildEpisodesOrCastCrewNode(dm.castCrew.getChildCount() > 0)
            m.episodesOrCastCrewRowList.visible = true
            m.divider.visible = true
        

            ' Seasons / Episodes
            m.seasonList.content = dm.seasons
            m.episodesList.content = dm.episodes
            m.episodesList.jumpToItem = dm.upNextIdx
            SetSeason(dm.upNextIdx)
            m.episodesGroup.visible = true


            ' Cast & Crew
            m.castAndCrewView.content = dm.castCrew
            OnEpisodesOrCastCrewList_ItemFocused()
            
            if m.lastFocusedControl = invalid then
                m.mediaInfoView.setFocus(true)
            else
                m.lastFocusedControl.setFocus(true)
            end if
            
            m.busySpinner.visible = false

        else
        
            m.errorDialog.message = [m.seriesDetailsTask.error]
            m.top.getScene().dialog = m.errorDialog
        
        end if

    end if

End Sub








' ********** ERROR DIALOG **********

Sub OnErrorDialog_Closed()

    m.top.getScene().dialog = invalid

End Sub











' ********** KEY PRESSES **********

Function onKeyEvent(key as String, press as Boolean) as Boolean

    if not press then return false

    if key = "up" or key = "back" then

        if m.episodesOrCastCrewRowList.isInFocusChain() then 
            m.slideUpAnimation.control = "stop"
            m.slideDownAnimation.control = "stop"
            m.slideDownAnimation.control = "start"
            m.mediaInfoView.setFocus(true)
            return true
        end if

        if m.seasonList.isInFocusChain() or m.castAndCrewView.isInFocusChain() then
            m.episodesOrCastCrewRowList.setFocus(true)
            return true
        end if

    end if

    if key = "up" then

        if m.episodesGroup.isInFocusChain() then
            m.episodesOrCastCrewRowList.setFocus(true)
            return true
        end if

    end if

    if key = "back" then

        if m.episodesList.hasFocus() then
            m.dontJump = true
            m.seasonList.setFocus(true)
            return true
        end if

    end if



    if key = "down" then

        if m.mediaInfoView.isInFocusChain() then
            m.slideDownAnimation.control = "stop"
            m.slideUpAnimation.control = "stop"
            m.slideUpAnimation.control = "start"
            m.episodesOrCastCrewRowList.setFocus(true)
            return true
        end if

        if m.episodesOrCastCrewRowList.isInFocusChain() then

            if GetEpisodeOrCastCrewListSelectedIndex() = 0 then
                m.dontJump = true
                m.seasonList.setFocus(true)
            else
                m.castAndCrewView.setFocus(true)
            end if
            return true

        end if

    end if


    if key = "right" or key = "OK" then

        if m.seasonList.hasFocus() then
            m.episodesList.setFocus(true)
            return true
        end if

    end if


    if key = "left" then

        if m.episodesList.hasFocus() then
            m.dontJump = true
            m.seasonList.setFocus(true)
            return true
        end if

    end if


    if key = "OK" or key = "play" then

        if m.episodesList.hasFocus() then

            dm = m.global.currentDetailedMedia
            idx = m.episodesList.itemSelected
            if idx <> dm.upNextIdx then
                dm.episodes.getChild(dm.upNextIdx).playStart = 0.0
                dm.upNextIdx = idx
            end if
            m.global.startVideoPlayback = true
            
            return true
            
        end if

    end if


    return false

End Function







' ********** UTILITIES **********

Sub BuildEpisodesOrCastCrewNode(includeCastCrew as boolean) 

    ' <ContentNode role="content">
    ' <!-- Row -->
    ' <ContentNode>
    '     <!-- 
    '         Items
    '         - - - - -
    '         "Episodes".width = 147
    '         "Cast & Crew".width = 202
    '         Give 5px extra on each side
    '     -->
    '     <LabelNode title="Episodes" fhdItemWidth="157" />
    '     <LabelNode title="Cast &amp; Crew"  fhdItemWidth="212" />
    ' </ContentNode>
    ' </ContentNode>

    root = createObject("roSGNode", "ContentNode")
    row = root.createChild("ContentNode")
    episodes = row.createChild("ContentNode")
    episodes.addField("FHDItemWidth", "float", false)
    episodes.setFields({
        title: "Episodes",
        fhdItemWidth: 147
    })

    if includeCastCrew then
        castCrew = row.createChild("ContentNode")
        castCrew.addField("FHDItemWidth", "float", false)
        castCrew.setFields({
            title: "Cast & Crew",
            fhdItemWidth: 212
        })
    end if

    m.episodesOrCastCrewRowList.content = root

End Sub


Function GetEpisodeOrCastCrewListSelectedIndex() as integer

    idx = m.episodesOrCastCrewRowList.rowItemFocused
    if idx = invalid then return 0
    if idx.count() < 2 then return 0

    return idx[1]

End Function


Sub SetSeason(episodeIdx as integer)

    dm = m.global.currentDetailedMedia
    episodeSeasonNum = dm.episodes.getChild(episodeIdx).seasonNum
    for seasonIdx = 0 to dm.seasons.getChildCount() - 1
        if dm.seasons.getChild(seasonIdx).Id = episodeSeasonNum.toStr() then
            m.seasonList.jumpToItem = seasonIdx
            exit for
        end if
    next

End Sub




Sub SetBackdrop()

    bm = m.global.currentBasicMedia
    if bm = invalid then return
    if bm.contentType <> 2 then return
    m.backdropPoster.uri = bm.backdropUrl ?? ""
    
End Sub
