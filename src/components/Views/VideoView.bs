Sub Init()

    m.global.observeFieldScoped("theme", "OnThemeChanged")  
    OnThemeChanged()

    m.top.notificationInterval = 0.5 ' Shortest allowed
    m.lastPosition = 0.0
    m.firstUpdateDone = false

    m.updatePlaybackProgressTask = CreateObject("roSGNode", "UpdatePlaybackProgressTask")
    m.markMovieWatchedTask = createObject("roSGNode", "MarkMovieWatchedTask")
    m.markEpisodeWatchedTask = createObject("roSGNode", "markEpisodeWatchedTask")

    m.top.observeField("state", "OnThis_StateChanged")
    m.top.observeField("position", "OnThis_PositionChanged")
    m.top.observeField("errorStr", "OnThis_Error")

    m.global.observeField("startVideoPlayback", "OnGlobal_StartVideoPlayback")

    
End sub


Sub OnThemeChanged()

    m.top.trickPlayBar.filledBarBlendColor = m.global.theme.primary

End Sub






Sub OnGlobal_StartVideoPlayback(event as object)

    if not event.getData() then return
    
    m.top.control = "stop"
    
    dm = m.global.currentDetailedMedia

    if dm.contentType = 1 then
        
        ' Movie
        m.top.content = dm

    else if dm.contentType = 2 then
        
        ' Series
        m.top.content = dm.episodes.getChild(dm.upNextIdx)

    end if
        
    m.firstUpdateDone = false
    m.top.control = "play"
    
    m.global.addToContinueWatching = true
    
End Sub





Sub OnThis_StateChanged(event as object)

    ' none	        No current play state
    ' buffering     Video stream is currently buffering
    ' playing	    Video is currently playing
    ' paused	    Video is currently paused
    ' stopping      Available since Roku OS 12.5. Video is in the process of being stopped. This value is only returned if the asyncStopSemantics field is enabled.
    ' stopped	    Video is currently stopped
    ' finished	    Video has successfully completed playback
    ' error	        An error has occurred in the video play. The error code, message, and diagnostics can be found in the errorCode, errorMsg, and errorStr fields respectively.    

    if m.top.content = invalid then return

    state = event.getData()

    print "VideoView:Video.State = " + state

    dm = m.global.currentDetailedMedia

    if state = "error" then

    else if state = "stopped" then

        if dm.contentType = 1 then
            dm.playStart = m.lastPosition
        else if dm.contentType = 2 then 
            dm.episodes.getChild(dm.upNextIdx).playStart = m.lastPosition
        end if

    else if state = "finished" then
        
        if dm.contentType = 1 then
            
            dm.playStart = 0.0
            m.updatePlaybackProgressTask.control = "stop"
            m.markMovieWatchedTask.id = dm.id
            m.markMovieWatchedTask.control = "run"
            m.global.removeFromContinueWatching = true
            m.top.playbackFinished = true

        else if dm.contentType = 2 then

            ' Reset current ep playStart
            dm.episodes.getChild(dm.upNextIdx).playStart = 0.0

            if not TryPlayNext() then 
                m.updatePlaybackProgressTask.control = "stop"
                m.markEpisodeWatchedTask.id = dm.episodes.getChild(dm.upNextIdx).id
                m.markEpisodeWatchedTask.control = "run"
                m.global.removeFromContinueWatching = true
                m.top.playbackFinished = true
            end if

        end if

    end if


End Sub


Function TryPlayNext() as boolean

    dm = m.global.currentDetailedMedia
    if dm.contentType = 2 then
        
        if dm.upNextIdx < dm.episodes.getChildCount() - 1 then
            dm.upNextIdx++
            dm.episodes.getChild(dm.upNextIdx).playStart = 0.0
            m.global.startVideoPlayback = true
            return true
        end if

    end if

    return false

End Function


Sub OnThis_PositionChanged(event as object)

    if not m.top.visible then return
    if m.top.content = invalid then return
    dm = m.global.currentDetailedMedia
    if dm = invalid then return
    if m.top.state = "finished" then return

    position = event.getData()
    print "VideoView:Postion", position
    
    ' if dm.contentType = 2 then dm.episodes.getChild(dm.upNextIdx).playStart = position
    
    if m.firstUpdateDone = false or abs(position - m.lastPosition) >= 10 then
        
        if not m.firstUpdateDone then position = 1.1

        m.updatePlaybackProgressTask.control = "stop"
        m.updatePlaybackProgressTask.id = m.top.content.id
        m.updatePlaybackProgressTask.seconds = position
        m.updatePlaybackProgressTask.control = "run"
        
        m.firstUpdateDone = true

    end if

    m.lastPosition = position

End Sub



Sub OnThis_Error(event as object)

    m.top.control = "stop"
    print event.getData()

End Sub


