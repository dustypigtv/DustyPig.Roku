function GetAccountToken() as string

    ' Try to get from the registry
    reg = CreateObject("roRegistrySection", "default")
    if reg.Exists("accountToken") then return reg.Read("accountToken")

    
    ' Try to get from the roku cloud
    channelStore = CreateObject("roSGNode", "ChannelStore")
    channelStore.command = "getChannelCred"
    accountToken = invalid
    if channelStore.channelCred <> invalid then 
        if channelStore.channelCred.json <> invalid then accountToken = channelStore.channelCred.json.channel_data
    end if


    ' If in cloud but not local device registry, save it
    if accountToken <> invalid then 
        reg.Write("accountToken", accountToken)
        reg.Flush()
    end if
    
    if accountToken = invalid then accountToken = ""
    return accountToken
    
end function

sub SaveAccountToken(accountToken as String)

    reg = CreateObject("roRegistrySection", "default")
    reg.Write("accountToken", accountToken)
    reg.Flush()

    channelStore = CreateObject("roSGNode", "ChannelStore")
    channelStore.channelCredData = accountToken
    channelStore.command = "storeChannelCredData"
    
end sub

sub DeleteAccountToken()

    reg = CreateObject("roRegistrySection", "default")
    if reg.Exists("accountToken") then reg.delete("accountToken")

    channelStore = CreateObject("roSGNode", "ChannelStore")
    channelStore.channelCredData = invalid
    channelStore.command = "storeChannelCredData"

end sub


function GetUrl(endpoint as string) as string

    return "https://service.dustypig.tv/api/v3" + endpoint
        
end function

function TranslateErrorCode(code as integer) as string

    if code = 400 then return "Bad Request"
    if code = 401 then return "Unauthorized"
    if code = 403 then return "Forbidden"
    if code = 404 then return "Not Found"
    if code = 405 then return "Method Not Allowed"

    if code = 500 then return "Internal Server Error"
    if code = 502 then return "Bad Gateway"
    if code = 503 then return "Service Unavailable"
    if code = 504 then return "Gateway Timeout"

    return `Unknown Error (${code})`

end function

function BuildResult(response as dynamic) as object

    if response.ok
        json = response.json()
        json.statusCode = response.status
        return json       
    else
        if response.status = 401 then DeleteAccountToken()
        return {"success": false, "statusCode": response.status, "error": TranslateErrorCode(response.status)}
    end if
    
end function



function CheckAccountToken() as boolean

    response = fetch({
        url: GetUrl("/NoOp/HelloAccount")
        headers: {
            "Authorization": "Bearer " + GetAccountToken()
        }
    })
    return response.ok

end function


function Login(email as string, password as string) as object

    di=createobject("roDeviceInfo")
    deviceId=di.GetChannelClientId()

    response = fetch({
        url: GetUrl("/Auth/PasswordLogin"),
        headers: {
            "Content-Type": "application/json"
        },
        body: FormatJson({"email": email, "password": password, "deviceId":deviceId})
    })

    ret = BuildResult(response)
    if ret.success then SaveAccountToken(ret.data.accountToken)

    return ret

end function


function SignUp(displayName as string, email as string, password as string) as object

    response = fetch({
        url: GetUrl("/Account/Create"),
        headers: {
            "Content-Type": "application/json"
        },
        body: FormatJson({"displayName": displayName, "email": email, "password": password})
    })

    ret = BuildResult(response)
    
    return ret

end function


sub Logout()

    response = fetch({
        url: GetUrl("/Auth/Signout")
        headers: {
            "Authorization": "Bearer " + GetAccountToken()
        }
    })
    
    DeleteAccountToken()

end sub





function GetData(subUrl as string, token as string) as object

    response = fetch({
        url: GetUrl(subUrl),
        headers: {
            "Authorization": "Bearer " + token
        }
    })

    return BuildResult(response)

end function


function PostData(subUrl as string, data as object, token as string) as object

    response = fetch({
        url: GetUrl(subUrl),
        headers: {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + token
        },
        body: FormatJson(data)
    })

    
    if response.ok
       return {"success": true, "statusCode": response.status}       
    else
        if response.status = 401 then DeleteAccountToken()
        return {"success": false, "statusCode": response.status, "error": TranslateErrorCode(response.status)}
    end if
    
    

end function


function PostAndGetData(subUrl as string, data as object, token as string) as object

    response = fetch({
        url: GetUrl(subUrl),
        headers: {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + token
        },
        body: FormatJson(data)
    })

    ret = BuildResult(response)
    
    return ret

end function


Function DeleteData(subUrl as string, token as string) as object

    response = fetch({
        url: GetUrl(subUrl),
        headers: {
            "Authorization": "Bearer " + token
        },
        method: "DELETE"
    })

    ret = BuildResult(response)

    return ret

End function

