function ProfilesToNode(data as object) as object

    ' Create a root content node, with child nodes holding info
    ret = createObject("roSGNode", "ContentNode")
    for each item in data
        
        bp = ret.createChild("ContentNode")
        bp.id = item.id.ToStr()
        bp.HDGRIDPOSTERURL = item.avatarUrl
        bp.SHORTDESCRIPTIONLINE1 = item.name
        bp.addFields({initials: item.initials, isMain: item.isMain, hasPin: item.hasPin})

    end for

    return ret

end function




Function StringHasValue(s as object) as boolean

    if s = invalid then return false
    if getInterface(s, "ifString") = invalid then return false
    if s.IsEmpty() then return false
    if s.trim().IsEmpty() then return false
    return true

End Function


Function FindChildNode(node as roSGNode, id as string) as roSGNode

    ' Sometimes, node.findNode(id) fails. Not sure why. So this is a backup
    if node = invalid then return invalid
    if not StringHasValue(id) then return invalid
    
    try
        ret = node.findNode(Id)
        if ret <> invalid then return ret
    catch e
    end try

    for i = 0 to node.getChildCount() - 1
        child = node.getChild(i)
        if child.id = id then return child
    end for

    return invalid

End Function





Function BuildBasicMediaFromDetailed(src as object) as object

    ' For movies, the year is in the secondary title
    title = src.title
    if src.contentType = 1 then title = title + " (" + src.secondaryTitle + ")"

    node = createObject("roSGNode", "BasicMediaNode")
    node.setFields({
        id: src.id,
        title: title,
        description: src.description,
        sdGridPosterUrl: src.sdGridPosterUrl,
        hdGridPosterUrl: src.hdGridPosterUrl,
        fhdGridPosterUrl: src.fhdGridPosterUrl,
        contentType: ContentTypeToString(src.contentType),
        backdropUrl: src.backdropUrl
    })

    return node

End function


Function MediaTypeToContentType(mediaType as integer) as string

    if mediaType = 1 then return "movie"
    if mediaType = 2 then return "series"
    if mediaType = 3 then return "episode"

    return ""

End Function

Function ContentTypeToString(contentType as integer) as string

    if contentType = 1 then return "movie"
    if contentType = 2 then return "series"
    if contentType = 4 then return "episode"

    return ""

End Function

Sub SetBasicMediaFields(src as object, dst as object)

    dst.setFields({
        id: src.id.ToStr(),
        title: src.title,
        description: src.description,
        sdGridPosterUrl: src.artworkUrl,
        hdGridPosterUrl: src.artworkUrl,
        fhdGridPosterUrl: src.artworkUrl,
        contentType: MediaTypeToContentType(src.mediaType),
        backdropUrl: src.backdropUrl
    })
   
End Sub


Function GetStreamFormat(uri as string) as string

    if uri = invalid then return invalid
    if len(uri) < 4 then return invalid

    if lcase(right(uri, 4)) = ".mp4" then return "mp4"
    if lcase(right(uri, 4)) = ".mov" then return "mp4"
    if lcase(right(uri, 4)) = ".m4v" then return "mp4"
    if lcase(right(uri, 4)) = ".mkv" then return "mkv"
    if lcase(right(uri, 4)) = ".mpd" then return "dash"

    if len(uri) > 4 and lcase(right(uri, 5)) = ".m3u8" then return "hls"

    return invalid

End Function


Function GetGenresString(genres as longinteger) as string

        
    ' [Flags]
    ' public enum Genres : long
    ' {
    '     Unknown = 0,
    '     Action = 1L << 0,
    '     Adventure = 1L << 1,
    '     Animation = 1L << 2,
    '     Anime = 1L << 3,
    '     Awards_Show = 1L << 4,
    '     Children = 1L << 5,
    '     Comedy = 1L << 6,
    '     Crime = 1L << 7,
    '     Documentary = 1L << 8,
    '     Drama = 1L << 9,
    '     Family = 1L << 10,
    '     Fantasy = 1L << 11,
    '     Food = 1L << 12,
    '     Game_Show = 1L << 13,
    '     History = 1L << 14,
    '     Home_and_Garden = 1L << 15,
    '     Horror = 1L << 16,
    '     Indie = 1L << 17,
    '     Martial_Arts = 1L << 18,
    '     Mini_Series = 1L << 19,
    '     Music = 1L << 20,
    '     Musical = 1L << 21,
    '     Mystery = 1L << 22,
    '     News = 1L << 23,
    '     Podcast = 1L << 24,
    '     Political = 1L << 25,
    '     Reality = 1L << 26,
    '     Romance = 1L << 27,
    '     Science_Fiction = 1L << 28,
    '     Soap = 1L << 29,
    '     Sports = 1L << 30,
    '     Suspense = 1L << 31,
    '     Talk_Show = 1L << 32,
    '     Thriller = 1L << 33,
    '     Travel = 1L << 34,
    '     TV_Movie = 1L << 35,
    '     War = 1L << 36,
    '     Western = 1L << 37,
    ' }

    if genres = 0 then return ""

    ret = []
    if genres and &H0000000001 then ret.push("Action")
    if genres and &H0000000002 then ret.push("Adventure")
    if genres and &H0000000004 then ret.push("Animation")
    if genres and &H0000000008 then ret.push("Anime")
    if genres and &H0000000010 then ret.push("Awards Show")
    if genres and &H0000000020 then ret.push("Children")
    if genres and &H0000000040 then ret.push("Comedy")
    if genres and &H0000000080 then ret.push("Crime")
    if genres and &H0000000100 then ret.push("Documentary")
    if genres and &H0000000200 then ret.push("Drama")
    if genres and &H0000000400 then ret.push("Family")
    if genres and &H0000000800 then ret.push("Fantasy")
    if genres and &H0000001000 then ret.push("Food")
    if genres and &H0000002000 then ret.push("Game Show")
    if genres and &H0000004000 then ret.push("History")
    if genres and &H0000008000 then ret.push("Home & Garden")
    if genres and &H0000010000 then ret.push("Horror")
    if genres and &H0000020000 then ret.push("Indie")
    if genres and &H0000040000 then ret.push("Martial Arts")
    if genres and &H0000080000 then ret.push("Mini Series")
    if genres and &H0000100000 then ret.push("Music")
    if genres and &H0000200000 then ret.push("Musical")
    if genres and &H0000400000 then ret.push("Mystery")
    if genres and &H0000800000 then ret.push("News")
    if genres and &H0001000000 then ret.push("Podcast")
    if genres and &H0002000000 then ret.push("Political")
    if genres and &H0004000000 then ret.push("Reality")
    if genres and &H0008000000 then ret.push("Romance")
    if genres and &H0010000000 then ret.push("Science Fiction")
    if genres and &H0020000000 then ret.push("Soap")
    if genres and &H0040000000 then ret.push("Sports")
    if genres and &H0080000000 then ret.push("Suspense")
    if genres and &H0100000000 then ret.push("Talk Show")
    if genres and &H0200000000 then ret.push("Thriller")
    if genres and &H0400000000 then ret.push("Travel")
    if genres and &H0800000000 then ret.push("TV Movie")
    if genres and &H1000000000 then ret.push("War")
    if genres and &H2000000000 then ret.push("Western")

    if ret.count() < 1 then return ""
    
    retStr = ""
    for i = 0 to ret.count() - 2
        retStr += ret[i] + ", "
    next
    retStr += ret[ret.count() - 1]

    return retStr

End Function