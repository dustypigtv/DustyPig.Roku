function ProfilesToNode(data as object) as object

    ' Create a root content node, with child nodes holding info
    ret = createObject("roSGNode", "ContentNode")
    for each item in data
        
        bp = ret.createChild("ContentNode")
        bp.id = item.id
        bp.HDGRIDPOSTERURL = item.avatarUrl
        bp.SHORTDESCRIPTIONLINE1 = item.name
        bp.addFields({initials: item.initials, isMain: item.isMain, hasPin: item.hasPin})

    end for

    return ret

end function


' Function GetDurationString(totalSeconds As float) As String
'     remaining = Int(totalSeconds)
'     hours = Int(remaining / 3600).ToStr()
'     remaining = remaining Mod 3600
'     minutes = Int(remaining / 60).ToStr()
'     remaining = remaining Mod 60
'     seconds = remaining.ToStr()

'     If hours <> "0" Then
'         Return PadLeft(hours, "0", 2) + ":" + PadLeft(minutes, "0", 2) + ":" + PadLeft(seconds, "0", 2)
'     Else
'         Return PadLeft(minutes, "0", 2) + ":" + PadLeft(seconds, "0", 2)
'     End If
' End Function



Function GetDurationString(totalSeconds As float) As String
    remaining = Int(totalSeconds)
    hours = Int(remaining / 3600).ToStr()
    remaining = remaining Mod 3600
    minutes = Int(remaining / 60).ToStr()
    remaining = remaining Mod 60
    seconds = remaining.ToStr()

    If hours <> "0" Then
        ret = hours + " hr"
        if hours <> "1" then ret = ret + "s"
        Return ret + " " + minutes + " min"
    Else
        Return minutes + " min"
    End If
End Function

Function PadLeft(value As String, padChar As String, totalLength As Integer) As String
    While value.Len() < totalLength
        value = padChar + value
    End While
    Return value
End Function


Function StringHasValue(s as string) as boolean

    if s = invalid then return false
    if s.IsEmpty() then return false
    if s.trim().IsEmpty() then return false
    return true

End Function


Function FindChildNode(node as roSGNode, id as string) as roSGNode

    ' Sometimes, node.findNode(id) fails. Not sure why. So this is a backup
    if node = invalid then return invalid
    if not StringHasValue(id) then return invalid

    ret = node.findNode(id)
    if ret = invalid then
        for i = 0 to node.getChildCount() - 1
            child = node.getChild(i)
            if child.id = id then return child
        end for
    end if

    return invalid

End Function