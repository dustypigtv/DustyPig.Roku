 Sub Main(args)

    print "Main:Main"

    'Create Message port
    m.port = CreateObject("roMessagePort") 
    
    'Create Screen object
    screen = CreateObject("roSGScreen") 
    screen.setMessagePort(m.port) 


    m.global = screen.getGlobalNode()

    appInfo = CreateObject("roAppInfo")
    m.global.addFields({isDev : appInfo.isDev()})
    
    ' Profile data will be memory only
    m.global.addField("allProfiles", "node", false)
    m.global.addFields({profileId : 0, profileToken : "", profileIsMain : false})
    

    ' Setup theme
    m.global.addFields({theme:  GetTheme(), defaultTheme:  GetTheme()})


    ' Only 1 media will ever be selected, so just store it here
    m.global.addField("currentMedia", "node", true)


    ' Multiple views will need to communicate these with each other, 
    ' so it's just easiest to observe global fields.
    m.global.addField("addToContinueWatching", "boolean", true)
    m.global.addField("removeFromContinueWatching", "boolean", true)
    m.global.addField("addToWatchlist", "boolean", true)
    m.global.addField("removeFromWatchlist", "boolean", true)
    m.global.addField("addPlaylist", "boolean", true)
    m.global.addField("removePlaylist", "boolean", true)


    
    ' Start Playback with this ContentNode
    m.global.addField("startVideoPlayback", "boolean", true)

   
    ' BaseScene will monitor these, and when 
    ' changed will change views accordingly
    m.global.addField("loggedOut", "boolean", true)
    m.global.addField("showViewWithId", "string", true)
    

    
    'Create Base Scene
    screen.CreateScene("BaseScene") 

    ' Handle deep link
    ' m.global.addField("deeplink", "assocarray", false)
    ' m.global.deeplink = GetDeepLinks(args)

    screen.show()
    ' vscode_rdb_on_device_component_entry

    
    'Main program loop
    while(true) 

        msg = wait(0, m.port)
        msgType = type(msg)
        
        if msgType = "roSGScreenEvent"
        
            if msg.isScreenClosed() then return

        end if

    end while

end sub


' Function GetDeepLinks(args) as Object

'     print "Main:GetDeepLinks"

'     if args.contentid <> Invalid and args.mediaType <> Invalid
'         return {
'             id: args.contentId
'             type: args.mediaType
'         }
'     end if

'     return invalid
    
' end Function

